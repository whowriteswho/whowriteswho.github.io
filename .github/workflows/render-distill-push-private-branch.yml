name: Render Distill Push Private

on:
  workflow_dispatch:
  push:

jobs:

  build:
    name: Prepare System
    runs-on: macOS-latest
#    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'WIP') && contains(github.event.head_commit.message, 'toweb')"
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2 # This is important to set for `git diff-tree` to work below
      # - uses: r-lib/actions/setup-r@v1
      # - uses: r-lib/actions/setup-pandoc@v1

      - uses: r-lib/actions/setup-r@master

      - uses: r-lib/actions/setup-pandoc@master

      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Restore R package cache
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Install dependencies
        run: |
          if (!requireNamespace("remotes", quietly = TRUE)) {install.packages("remotes")}
          remotes::install_deps(dependencies = TRUE)
          if (!requireNamespace("pkgdown", quietly = TRUE)) {install.packages("pkgdown", type = "binary")}
          if (!requireNamespace("rmarkdown", quietly = TRUE)) {install.packages("rmarkdown")}
          if (!requireNamespace("pagedown", quietly = TRUE)) {install.packages("pagedown")}
          if (!requireNamespace("fs", quietly = TRUE)) {install.packages("fs")}
          if (!requireNamespace("readr", quietly = TRUE)) {install.packages("readr")}
          if (!requireNamespace("dplyr", quietly = TRUE)) {install.packages("dplyr")}
          if (!requireNamespace("magrittr", quietly = TRUE)) {install.packages("magrittr")}          
          if (!requireNamespace("officer", quietly = TRUE)) {install.packages("officer")}
          if (!requireNamespace("textreadr", quietly = TRUE)) {install.packages("textreadr")}
          if (!requireNamespace("here", quietly = TRUE)) {install.packages("here")}
          if (!requireNamespace("magicfor", quietly = TRUE)) {install.packages("magicfor")}
          if (!requireNamespace("htmltools", quietly = TRUE)) {install.packages("htmltools")}
          if (!requireNamespace("markdown", quietly = TRUE)) {install.packages("markdown")}
        shell: Rscript {0}

      - name: Render Site
        run: |
#           Rscript -e 'lastmodifiedtext <- paste0("This repository was updated on: ", Sys.time());write(x = lastmodifiedtext, file = "./lastupdate.html")'
#           Rscript -e 'rmarkdown::render_site(encoding = "UTF-8")'
      - name: Update files in docs to push private branch
        run: |          
#           Rscript -e 'fs::file_delete("docs/404.html")'
#           Rscript -e 'fs::file_copy("404.md", "docs/404.md")'
#           Rscript -e 'fs::dir_delete("docs/R")'
#       - name: Update files in prepelectron and docselectron to push electron branch
#         run: |
#           Rscript -e 'fs::file_copy(".github/workflows/buildelectron.yml", "prepelectron/.github/workflows/buildelectron.yml", overwrite = TRUE)'
#           Rscript -e 'fs::dir_delete("docselectron")'
#           Rscript -e 'fs::dir_copy("docs", "prepelectron/src", overwrite = TRUE)'
#           Rscript -e 'fs::dir_copy("prepelectron", "docselectron", overwrite = TRUE)'
#      - name: remove docselectron 
#        run: |
#          Rscript -e 'if (!fs::dir_exists("docselectron")) {fs::dir_delete("docselectron")'}
#      - name: npx create-electron-app
#        run: |
#          npx create-electron-app@latest docselectron
#      - name: Update files in docselectron to push electron branch
#        run: |          
#          Rscript -e 'if (!fs::dir_exists("docselectron/src")) {fs::dir_delete("docselectron/src")}'
#          Rscript -e 'fs::dir_copy("docs", "docselectron/src", overwrite = TRUE)'
#          Rscript -e 'if (!fs::file_exists("docselectron/.gitignore")) {fs::file_copy(".gitignore", "docselectron/.gitignore")}'
#      - name: "Reorganize files in docselectron"
#        run: |
#          Rscript -e 'if (!fs::dir_exists("docselectron/.github")) {fs::dir_create("docselectron/.github")}'
#          Rscript -e 'if (!fs::dir_exists("docselectron/.github/workflows")) {fs::dir_create("docselectron/.github/workflows")}'
#          Rscript -e 'fs::file_copy(".github/workflows/buildelectron.yml", "docselectron/.github/workflows/buildelectron.yml")'

      - name: Commit results to main branch
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git add .
          git commit -m "CI added changes `date +'%Y-%m-%d %H:%M:%S'`" || echo "No changes to commit"
          git push origin || echo "No changes to commit"

      - name: Push changes # push the output folder to your repo
        uses: ad-m/github-push-action@master
        with:
          branch: main
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # WORKFLOW_GITHUB_TOKEN
          force: true

  release:
#    needs: build
    name: Deploy to GitHub Branches
    runs-on: ubuntu-latest
#     env:
#     GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@master
      - name: Deploy to privpage branch
        uses: s0/git-publish-subdir-action@develop
        env:
          REPO: self
          BRANCH: privpage
          FOLDER: docs
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
#       - name: Deploy to electron branch
#         uses: s0/git-publish-subdir-action@develop
#         env:
#           REPO: self
#           BRANCH: electron
#           FOLDER: docselectron
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#       - name: Clean previous electron branch
#         run: |
#           git fetch origin
#           git checkout main
#           git branch -D electron || echo "No branch electron"
#           git push origin --delete electron || echo "No branch electron"
#       - name: Create electron branch
#         run: |
#           git checkout -b electron
#           git push origin electron





#      - uses: actions/checkout@master
#      - name: Deploy to Electron Branch
#        uses: s0/git-publish-subdir-action@develop
#        env:
#          REPO: self
#          BRANCH: electron
#          FOLDER: docselectron
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


          

#      - name: Commit results
#        run: |
#          git add -A
#          git commit -m 'Rebuild site' || echo "No changes to commit"
#          git push origin || echo "No changes to commit"




#       - uses: actions/checkout@v2
#       - name: Deploy
#         run: |
#           # git config user.name CI
#           # git config user.email ""
#           git checkout -f --orphan privpage-${GITHUB_REF##*/}
#           git rm --cached -rfq .
#           git clean -fxdq
#           mv /docs/ .
#           git add .
#           git commit -qm "Update docs"
#           git push -f --set-upstream origin privpage-${GITHUB_REF##*/}

    


# https://github.com/Priv-Page/privpage/blob/master/.github/workflows/documentation.yml
#     - name: Deploy2
#       run: |
#         git config user.name CI
#         git config user.email ""
#         git checkout -f --orphan privpage-${GITHUB_REF##*/}
#         git rm --cached -rfq .
#         git clean -fxdq
#         mv /docs/* .
#         git add .
#         git commit -qm "Update docs"
#         git push -f --set-upstream origin privpage-${GITHUB_REF##*/} 


#   copy-file:
#     runs-on: ubuntu-latest
#     steps:
#     - name: Checkout
#       uses: actions/checkout@v2
# 
#     - name: Pushes file to other repo
#       uses: dmnemec/copy_file_to_another_repo_action@main
#       env:
#         API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
#       with:
#         source_file: 'nasil-bir-patoloji-raporu.md'
#         destination_repo: 'PathologyWeb/PathologyWeb.github.io'
#         destination_folder: 'articles'
#         user_email: 'drserdarbalci@gmail.com'
#         user_name: 'sbalci'
#         commit_message: 'update to file'
        

#   copy-file:
#     needs: release
#     name: Copy folder to wp repo
#     runs-on: ubuntu-latest
#     steps:
#     - name: Checkout
#       uses: actions/checkout@v2
# 
#     - name: Pushes test folder
#       uses: crykn/copy_folder_to_another_repo_action@v1.0.6
#       env:
#         API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
#       with:
#         source_folder: 'docs'
#         destination_repo: 'PathologyWeb/wp_patolojiraporlari'
#         destination_folder: 'docs'
#         user_email: 'drserdarbalci@gmail.com'
#         user_name: 'sbalci'
#         commit_msg: 'updated docs'


#   get-changed:
#     needs: release
#     name: Get changed files
#     runs-on: ubuntu-latest
#     steps:
# #     - name: Checkout
# #       uses: actions/checkout@v2
#     - name: Get changed files
#       uses: Stockopedia/action-get-changed-files@v1
#       id: get_changed
#       with:
#         github-token: ${{ secrets.GITHUB_TOKEN }}
#         ignore: "**/*.js" # glob # "**/+(.github)"
#         foldersOnly: true # to only include folders in the output #false
#         format: json # either json, csv or newline
#     - name: Echo
#       run: echo ${{ steps.get_changed.outputs.changed }}

        
